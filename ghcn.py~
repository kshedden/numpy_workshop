import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

"""
This script takes the data from one or more stations in the GHC
network and constructs anomaly (residual) series for the daily maximum
temperature measurements.

File format information:

http://www1.ncdc.noaa.gov/pub/data/ghcn/daily/readme.txt
"""

# All plots go here
pdf = PdfPages("ghcn.pdf")

# Data are here
bpath = "/nfs/kshedden/GHCN"

files = os.listdir(os.path.join(bpath, "ghcnd_gsn"))

# Column specs for the data files
colspecs = [(0, 11), (11, 15), (15, 17), (17, 21)]
colnames = ["id", "year", "month", "element"]
ii = 21
for k in range(31):
    v = [(ii, ii+5), (ii+6, ii+7)]
    colspecs.extend(v)
    v = ["value_%d" % (k + 1), "qflag_%d" % (k + 1)]
    colnames.extend(v)
    ii += 8

# wide to long conversion and other manipulations that are common to
# the temperature and flag files
def prep(df):
    df = pd.melt(df, id_vars=("id", "year", "month"))
    df["variable"] = df["variable"].apply(lambda x: int(x.split("_")[1]))
    df = df.rename(columns={"variable": "day"})
    dd = df[["year", "month", "day"]]
    df["date"] = pd.to_datetime(dd, errors="coerce")
    df = df.drop(["year", "month", "day"], axis=1)
    df["dayofyear"] = df.date.dt.dayofyear
    df = df.set_index("date")
    return df


for fname in files:

    fname = os.path.join(bpath, "ghcnd_gsn", fname)
    df = pd.read_fwf(fname, colspecs=colspecs, header=None, compression="gzip")
    assert(df.shape[1] == len(colnames))
    df.columns = colnames

    # Keep only tmax records
    df = df.loc[df.element == "TMAX"]
    del df["element"]

    # df1 contains the tmax data
    cols = ["id", "year", "month"]
    for v in df.columns:
        if "value" in v:
            cols.append(v)
    station_id = df["id"].head(1)
    station_id = station_id.values[0]
    df1 = df[cols]
    df1 = prep(df1)
    df1 = df1.rename(columns={"value": "tmax"})
    df1.tmax /= 10
    del df1["id"]

    # df2 contains the quality flags
    cols = ["id", "year", "month"]
    for v in df.columns:
        if "qflag" in v:
            cols.append(v)
    df2 = df[cols]
    df2 = prep(df2)
    df2 = df2.rename(columns={"value": "qflag"})
    del df2["dayofyear"]
    del df2["id"]

    df = pd.merge(df1, df2, left_index=True, right_index=True)

    # Drop missing values
    ii = df.tmax == -999.9
    ii |= pd.notnull(df.qflag)
    df.loc[ii, "tmax"] = np.nan
    del df["qflag"]
    df = df.dropna()

    # Construct the anomalies
    meantmax = df.groupby("dayofyear")["tmax"].agg(np.mean)
    meantmax = pd.DataFrame(meantmax)
    df = pd.merge(df, meantmax, left_on="dayofyear", right_index=True)
    df = df.rename(columns={"tmax_x": "tmax", "tmax_y": "tmax_avg"})
    df["anomaly"] = df.tmax - df.tmax_avg

    df = df.sort_index()

    # Plot the raw temperatures
    plt.clf()
    df["tmax"].iloc[0:2000].plot()
    plt.ylabel("Temperature (C)", size=16)
    plt.xlabel("Date", size=16)
    pdf.savefig()

    # Plot the temperature anomalies
    plt.clf()
    df["anomaly"].iloc[0:2000].plot()
    plt.ylabel("Temperature anomaly (C)", size=16)
    plt.xlabel("Date", size=16)
    pdf.savefig()

    break

pdf.close()
