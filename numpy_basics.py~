## Numpy data structures

The main numpy data structure is the ndarray,
which stands for "n-dimenional array". First, since numpy is a library
we need to import it.


    import numpy as np

    An ndarray is a homogeneous rectangular data structure. Being
    "homogeneous" means all data values in the container must have the
    same type. Numpy supports many data types. In the following cell,
    we create a 1-dimensional literal ndarray with 8 byte floating
    point (double precision) values.

    In [18]:
        x = np.asarray([4, 1, 5, 4, 7, 3, 0], dtype=np.float64)
        Since the data are all integers, we could have used an integer data type instead:

            In [19]:
                x = np.asarray([4, 1, 5, 4, 7, 3, 0], dtype=np.int64)
                We can even store them as single byte values (since none of the values exceeds 255):

                    In [20]:
                        x = np.asarray([4, 1, 5, 4, 7, 3, 0], dtype=np.uint8)
                        We can index and slice an ndarray just like we index and slice a Python list:

                            In [21]:
                                print(x[2])
                                print(x[3:5])
                                5
                                [4 7]
                                In addition, ndarrays support two types of indexing that core Python lists do not. We can index with a Boolean array:

                                    In [22]:
                                        ii = np.asarray([False, False, True, False, True, False, False])
                                        print(x[ii])
                                        [5 7]
                                        We can also index using a list of positions:

                                            In [23]:
                                                ix = np.asarray([0, 3, 3, 5])
                                                print(x[ii])
                                                [5 7]
                                                We can do elementwise arithmetic using numpy arrays as long as they are conformable (or can be broadcast to be conformable, but that is a more advanced topic). Note that numerical types are "upcast".

                                                In [24]:
                                                    y = np.asarray([0, 1, 0, -1, 1, 1, -2], dtype=np.float64)
                                                    z = x + y
                                                    print(z)
                                                    print(z.dtype)
                                                    [ 4.  2.  5.  3.  8.  4. -2.]
                                                    float64
                                                    An ndarray can have multiple dimensions:

                                                        In [25]:
                                                            x = np.zeros((4, 3))
                                                            print(x)
                                                            [[ 0.  0.  0.]
                                                              [ 0.  0.  0.]
                                                              [ 0.  0.  0.]
                                                              [ 0.  0.  0.]]
                                                            In [26]:
                                                                x = np.zeros((4, 3, 2))
                                                                print(x)
                                                                [[[ 0.  0.]
                                                                    [ 0.  0.]
                                                                    [ 0.  0.]]

                                                                  [[ 0.  0.]
                                                                     [ 0.  0.]
                                                                     [ 0.  0.]]

                                                                  [[ 0.  0.]
                                                                     [ 0.  0.]
                                                                     [ 0.  0.]]

                                                                  [[ 0.  0.]
                                                                     [ 0.  0.]
                                                                     [ 0.  0.]]]
                                                                Slicing ndarrays with multiple dimensions is straightforward:

                                                                    In [27]:
                                                                        x = np.random.normal(size=(3, 4))
                                                                        print(x)
                                                                        print(x[1, :])
                                                                        print(x[1:3, 2:4])
                                                                        [[-1.42283865  1.24671798 -1.58036635  0.86115185]
                                                                          [ 1.25666217  2.47697181  0.32879628 -1.03057258]
                                                                          [ 0.8517466  -0.25932041 -1.58917537 -0.83187607]]
                                                                        [ 1.25666217  2.47697181  0.32879628 -1.03057258]
                                                                        [[ 0.32879628 -1.03057258]
                                                                          [-1.58917537 -0.83187607]]
